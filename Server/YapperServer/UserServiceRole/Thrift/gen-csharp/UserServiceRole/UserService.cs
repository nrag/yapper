/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace UserServiceRole
{
  public partial class UserService {
    public interface Iface {
      UserCookie ValidateUser(string phoneNumber, int oneTimePassword, string deviceId, string random);
      #if SILVERLIGHT
      IAsyncResult Begin_ValidateUser(AsyncCallback callback, object state, string phoneNumber, int oneTimePassword, string deviceId, string random);
      UserCookie End_ValidateUser(IAsyncResult asyncResult);
      #endif
      User RegisterUser(string phoneNumber, string name, string deviceId);
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterUser(AsyncCallback callback, object state, string phoneNumber, string name, string deviceId);
      User End_RegisterUser(IAsyncResult asyncResult);
      #endif
      User CreateGroup(User newGroup);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateGroup(AsyncCallback callback, object state, User newGroup);
      User End_CreateGroup(IAsyncResult asyncResult);
      #endif
      bool AddUserToGroup(int groupId, string user);
      #if SILVERLIGHT
      IAsyncResult Begin_AddUserToGroup(AsyncCallback callback, object state, int groupId, string user);
      bool End_AddUserToGroup(IAsyncResult asyncResult);
      #endif
      bool RemoveUserFromGroup(int groupId, string user);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveUserFromGroup(AsyncCallback callback, object state, int groupId, string user);
      bool End_RemoveUserFromGroup(IAsyncResult asyncResult);
      #endif
      List<User> GetGroups();
      #if SILVERLIGHT
      IAsyncResult Begin_GetGroups(AsyncCallback callback, object state);
      List<User> End_GetGroups(IAsyncResult asyncResult);
      #endif
      List<User> GetUsers(List<string> phoneNumbers);
      #if SILVERLIGHT
      IAsyncResult Begin_GetUsers(AsyncCallback callback, object state, List<string> phoneNumbers);
      List<User> End_GetUsers(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_ValidateUser(AsyncCallback callback, object state, string phoneNumber, int oneTimePassword, string deviceId, string random)
      {
        return send_ValidateUser(callback, state, phoneNumber, oneTimePassword, deviceId, random);
      }

      public UserCookie End_ValidateUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ValidateUser();
      }

      #endif

      public UserCookie ValidateUser(string phoneNumber, int oneTimePassword, string deviceId, string random)
      {
        #if !SILVERLIGHT
        send_ValidateUser(phoneNumber, oneTimePassword, deviceId, random);
        return recv_ValidateUser();

        #else
        var asyncResult = Begin_ValidateUser(null, null, phoneNumber, oneTimePassword, deviceId, random);
        return End_ValidateUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ValidateUser(AsyncCallback callback, object state, string phoneNumber, int oneTimePassword, string deviceId, string random)
      #else
      public void send_ValidateUser(string phoneNumber, int oneTimePassword, string deviceId, string random)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ValidateUser", TMessageType.Call, seqid_));
        ValidateUser_args args = new ValidateUser_args();
        args.PhoneNumber = phoneNumber;
        args.OneTimePassword = oneTimePassword;
        args.DeviceId = deviceId;
        args.Random = random;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserCookie recv_ValidateUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ValidateUser_result result = new ValidateUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ValidateUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RegisterUser(AsyncCallback callback, object state, string phoneNumber, string name, string deviceId)
      {
        return send_RegisterUser(callback, state, phoneNumber, name, deviceId);
      }

      public User End_RegisterUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterUser();
      }

      #endif

      public User RegisterUser(string phoneNumber, string name, string deviceId)
      {
        #if !SILVERLIGHT
        send_RegisterUser(phoneNumber, name, deviceId);
        return recv_RegisterUser();

        #else
        var asyncResult = Begin_RegisterUser(null, null, phoneNumber, name, deviceId);
        return End_RegisterUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterUser(AsyncCallback callback, object state, string phoneNumber, string name, string deviceId)
      #else
      public void send_RegisterUser(string phoneNumber, string name, string deviceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterUser", TMessageType.Call, seqid_));
        RegisterUser_args args = new RegisterUser_args();
        args.PhoneNumber = phoneNumber;
        args.Name = name;
        args.DeviceId = deviceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_RegisterUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterUser_result result = new RegisterUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateGroup(AsyncCallback callback, object state, User newGroup)
      {
        return send_CreateGroup(callback, state, newGroup);
      }

      public User End_CreateGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateGroup();
      }

      #endif

      public User CreateGroup(User newGroup)
      {
        #if !SILVERLIGHT
        send_CreateGroup(newGroup);
        return recv_CreateGroup();

        #else
        var asyncResult = Begin_CreateGroup(null, null, newGroup);
        return End_CreateGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateGroup(AsyncCallback callback, object state, User newGroup)
      #else
      public void send_CreateGroup(User newGroup)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateGroup", TMessageType.Call, seqid_));
        CreateGroup_args args = new CreateGroup_args();
        args.NewGroup = newGroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public User recv_CreateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateGroup_result result = new CreateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddUserToGroup(AsyncCallback callback, object state, int groupId, string user)
      {
        return send_AddUserToGroup(callback, state, groupId, user);
      }

      public bool End_AddUserToGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddUserToGroup();
      }

      #endif

      public bool AddUserToGroup(int groupId, string user)
      {
        #if !SILVERLIGHT
        send_AddUserToGroup(groupId, user);
        return recv_AddUserToGroup();

        #else
        var asyncResult = Begin_AddUserToGroup(null, null, groupId, user);
        return End_AddUserToGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddUserToGroup(AsyncCallback callback, object state, int groupId, string user)
      #else
      public void send_AddUserToGroup(int groupId, string user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddUserToGroup", TMessageType.Call, seqid_));
        AddUserToGroup_args args = new AddUserToGroup_args();
        args.GroupId = groupId;
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_AddUserToGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddUserToGroup_result result = new AddUserToGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddUserToGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveUserFromGroup(AsyncCallback callback, object state, int groupId, string user)
      {
        return send_RemoveUserFromGroup(callback, state, groupId, user);
      }

      public bool End_RemoveUserFromGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveUserFromGroup();
      }

      #endif

      public bool RemoveUserFromGroup(int groupId, string user)
      {
        #if !SILVERLIGHT
        send_RemoveUserFromGroup(groupId, user);
        return recv_RemoveUserFromGroup();

        #else
        var asyncResult = Begin_RemoveUserFromGroup(null, null, groupId, user);
        return End_RemoveUserFromGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveUserFromGroup(AsyncCallback callback, object state, int groupId, string user)
      #else
      public void send_RemoveUserFromGroup(int groupId, string user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveUserFromGroup", TMessageType.Call, seqid_));
        RemoveUserFromGroup_args args = new RemoveUserFromGroup_args();
        args.GroupId = groupId;
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RemoveUserFromGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveUserFromGroup_result result = new RemoveUserFromGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveUserFromGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGroups(AsyncCallback callback, object state)
      {
        return send_GetGroups(callback, state);
      }

      public List<User> End_GetGroups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGroups();
      }

      #endif

      public List<User> GetGroups()
      {
        #if !SILVERLIGHT
        send_GetGroups();
        return recv_GetGroups();

        #else
        var asyncResult = Begin_GetGroups(null, null);
        return End_GetGroups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGroups(AsyncCallback callback, object state)
      #else
      public void send_GetGroups()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGroups", TMessageType.Call, seqid_));
        GetGroups_args args = new GetGroups_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<User> recv_GetGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGroups_result result = new GetGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGroups failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUsers(AsyncCallback callback, object state, List<string> phoneNumbers)
      {
        return send_GetUsers(callback, state, phoneNumbers);
      }

      public List<User> End_GetUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUsers();
      }

      #endif

      public List<User> GetUsers(List<string> phoneNumbers)
      {
        #if !SILVERLIGHT
        send_GetUsers(phoneNumbers);
        return recv_GetUsers();

        #else
        var asyncResult = Begin_GetUsers(null, null, phoneNumbers);
        return End_GetUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUsers(AsyncCallback callback, object state, List<string> phoneNumbers)
      #else
      public void send_GetUsers(List<string> phoneNumbers)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUsers", TMessageType.Call, seqid_));
        GetUsers_args args = new GetUsers_args();
        args.PhoneNumbers = phoneNumbers;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<User> recv_GetUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUsers_result result = new GetUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUsers failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["ValidateUser"] = ValidateUser_Process;
        processMap_["RegisterUser"] = RegisterUser_Process;
        processMap_["CreateGroup"] = CreateGroup_Process;
        processMap_["AddUserToGroup"] = AddUserToGroup_Process;
        processMap_["RemoveUserFromGroup"] = RemoveUserFromGroup_Process;
        processMap_["GetGroups"] = GetGroups_Process;
        processMap_["GetUsers"] = GetUsers_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ValidateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ValidateUser_args args = new ValidateUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ValidateUser_result result = new ValidateUser_result();
        result.Success = iface_.ValidateUser(args.PhoneNumber, args.OneTimePassword, args.DeviceId, args.Random);
        oprot.WriteMessageBegin(new TMessage("ValidateUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterUser_args args = new RegisterUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterUser_result result = new RegisterUser_result();
        result.Success = iface_.RegisterUser(args.PhoneNumber, args.Name, args.DeviceId);
        oprot.WriteMessageBegin(new TMessage("RegisterUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateGroup_args args = new CreateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateGroup_result result = new CreateGroup_result();
        result.Success = iface_.CreateGroup(args.NewGroup);
        oprot.WriteMessageBegin(new TMessage("CreateGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddUserToGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddUserToGroup_args args = new AddUserToGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddUserToGroup_result result = new AddUserToGroup_result();
        result.Success = iface_.AddUserToGroup(args.GroupId, args.User);
        oprot.WriteMessageBegin(new TMessage("AddUserToGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveUserFromGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveUserFromGroup_args args = new RemoveUserFromGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveUserFromGroup_result result = new RemoveUserFromGroup_result();
        result.Success = iface_.RemoveUserFromGroup(args.GroupId, args.User);
        oprot.WriteMessageBegin(new TMessage("RemoveUserFromGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGroups_args args = new GetGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGroups_result result = new GetGroups_result();
        result.Success = iface_.GetGroups();
        oprot.WriteMessageBegin(new TMessage("GetGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUsers_args args = new GetUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUsers_result result = new GetUsers_result();
        result.Success = iface_.GetUsers(args.PhoneNumbers);
        oprot.WriteMessageBegin(new TMessage("GetUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ValidateUser_args : TBase
    {
      private string _phoneNumber;
      private int _oneTimePassword;
      private string _deviceId;
      private string _random;

      public string PhoneNumber
      {
        get
        {
          return _phoneNumber;
        }
        set
        {
          __isset.phoneNumber = true;
          this._phoneNumber = value;
        }
      }

      public int OneTimePassword
      {
        get
        {
          return _oneTimePassword;
        }
        set
        {
          __isset.oneTimePassword = true;
          this._oneTimePassword = value;
        }
      }

      public string DeviceId
      {
        get
        {
          return _deviceId;
        }
        set
        {
          __isset.deviceId = true;
          this._deviceId = value;
        }
      }

      public string Random
      {
        get
        {
          return _random;
        }
        set
        {
          __isset.random = true;
          this._random = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool phoneNumber;
        public bool oneTimePassword;
        public bool deviceId;
        public bool random;
      }

      public ValidateUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PhoneNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                OneTimePassword = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Random = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ValidateUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PhoneNumber != null && __isset.phoneNumber) {
          field.Name = "phoneNumber";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PhoneNumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.oneTimePassword) {
          field.Name = "oneTimePassword";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(OneTimePassword);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (Random != null && __isset.random) {
          field.Name = "random";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Random);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ValidateUser_args(");
        sb.Append("PhoneNumber: ");
        sb.Append(PhoneNumber);
        sb.Append(",OneTimePassword: ");
        sb.Append(OneTimePassword);
        sb.Append(",DeviceId: ");
        sb.Append(DeviceId);
        sb.Append(",Random: ");
        sb.Append(Random);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ValidateUser_result : TBase
    {
      private UserCookie _success;

      public UserCookie Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ValidateUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserCookie();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ValidateUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ValidateUser_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterUser_args : TBase
    {
      private string _phoneNumber;
      private string _name;
      private string _deviceId;

      public string PhoneNumber
      {
        get
        {
          return _phoneNumber;
        }
        set
        {
          __isset.phoneNumber = true;
          this._phoneNumber = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string DeviceId
      {
        get
        {
          return _deviceId;
        }
        set
        {
          __isset.deviceId = true;
          this._deviceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool phoneNumber;
        public bool name;
        public bool deviceId;
      }

      public RegisterUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PhoneNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PhoneNumber != null && __isset.phoneNumber) {
          field.Name = "phoneNumber";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PhoneNumber);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterUser_args(");
        sb.Append("PhoneNumber: ");
        sb.Append(PhoneNumber);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",DeviceId: ");
        sb.Append(DeviceId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterUser_result : TBase
    {
      private User _success;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RegisterUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RegisterUser_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateGroup_args : TBase
    {
      private User _newGroup;

      public User NewGroup
      {
        get
        {
          return _newGroup;
        }
        set
        {
          __isset.newGroup = true;
          this._newGroup = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool newGroup;
      }

      public CreateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                NewGroup = new User();
                NewGroup.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NewGroup != null && __isset.newGroup) {
          field.Name = "newGroup";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          NewGroup.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateGroup_args(");
        sb.Append("NewGroup: ");
        sb.Append(NewGroup== null ? "<null>" : NewGroup.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateGroup_result : TBase
    {
      private User _success;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new User();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddUserToGroup_args : TBase
    {
      private int _groupId;
      private string _user;

      public int GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool user;
      }

      public AddUserToGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                GroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddUserToGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GroupId);
          oprot.WriteFieldEnd();
        }
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddUserToGroup_args(");
        sb.Append("GroupId: ");
        sb.Append(GroupId);
        sb.Append(",User: ");
        sb.Append(User);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddUserToGroup_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AddUserToGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddUserToGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddUserToGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveUserFromGroup_args : TBase
    {
      private int _groupId;
      private string _user;

      public int GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public string User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
        public bool user;
      }

      public RemoveUserFromGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                GroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveUserFromGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GroupId);
          oprot.WriteFieldEnd();
        }
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveUserFromGroup_args(");
        sb.Append("GroupId: ");
        sb.Append(GroupId);
        sb.Append(",User: ");
        sb.Append(User);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveUserFromGroup_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RemoveUserFromGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveUserFromGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveUserFromGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGroups_args : TBase
    {

      public GetGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGroups_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGroups_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGroups_result : TBase
    {
      private List<User> _success;

      public List<User> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<User>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    User _elem6 = new User();
                    _elem6 = new User();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (User _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGroups_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUsers_args : TBase
    {
      private List<string> _phoneNumbers;

      public List<string> PhoneNumbers
      {
        get
        {
          return _phoneNumbers;
        }
        set
        {
          __isset.phoneNumbers = true;
          this._phoneNumbers = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool phoneNumbers;
      }

      public GetUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PhoneNumbers = new List<string>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    string _elem10 = null;
                    _elem10 = iprot.ReadString();
                    PhoneNumbers.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PhoneNumbers != null && __isset.phoneNumbers) {
          field.Name = "phoneNumbers";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, PhoneNumbers.Count));
            foreach (string _iter11 in PhoneNumbers)
            {
              oprot.WriteString(_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUsers_args(");
        sb.Append("PhoneNumbers: ");
        sb.Append(PhoneNumbers);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUsers_result : TBase
    {
      private List<User> _success;

      public List<User> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<User>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    User _elem14 = new User();
                    _elem14 = new User();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (User _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
